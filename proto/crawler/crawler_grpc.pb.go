// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.0
// source: crawler.proto

package crawler

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrawlerMasterClient is the client API for CrawlerMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlerMasterClient interface {
	AddResource(ctx context.Context, in *ResourceSpec, opts ...grpc.CallOption) (*NodeSpec, error)
	DeleteResource(ctx context.Context, in *ResourceSpec, opts ...grpc.CallOption) (*empty.Empty, error)
}

type crawlerMasterClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerMasterClient(cc grpc.ClientConnInterface) CrawlerMasterClient {
	return &crawlerMasterClient{cc}
}

func (c *crawlerMasterClient) AddResource(ctx context.Context, in *ResourceSpec, opts ...grpc.CallOption) (*NodeSpec, error) {
	out := new(NodeSpec)
	err := c.cc.Invoke(ctx, "/CrawlerMaster/AddResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerMasterClient) DeleteResource(ctx context.Context, in *ResourceSpec, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/CrawlerMaster/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrawlerMasterServer is the server API for CrawlerMaster service.
// All implementations must embed UnimplementedCrawlerMasterServer
// for forward compatibility
type CrawlerMasterServer interface {
	AddResource(context.Context, *ResourceSpec) (*NodeSpec, error)
	DeleteResource(context.Context, *ResourceSpec) (*empty.Empty, error)
	mustEmbedUnimplementedCrawlerMasterServer()
}

// UnimplementedCrawlerMasterServer must be embedded to have forward compatible implementations.
type UnimplementedCrawlerMasterServer struct {
}

func (UnimplementedCrawlerMasterServer) AddResource(context.Context, *ResourceSpec) (*NodeSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedCrawlerMasterServer) DeleteResource(context.Context, *ResourceSpec) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedCrawlerMasterServer) mustEmbedUnimplementedCrawlerMasterServer() {}

// UnsafeCrawlerMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlerMasterServer will
// result in compilation errors.
type UnsafeCrawlerMasterServer interface {
	mustEmbedUnimplementedCrawlerMasterServer()
}

func RegisterCrawlerMasterServer(s grpc.ServiceRegistrar, srv CrawlerMasterServer) {
	s.RegisterService(&CrawlerMaster_ServiceDesc, srv)
}

func _CrawlerMaster_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerMasterServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CrawlerMaster/AddResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerMasterServer).AddResource(ctx, req.(*ResourceSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlerMaster_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerMasterServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CrawlerMaster/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerMasterServer).DeleteResource(ctx, req.(*ResourceSpec))
	}
	return interceptor(ctx, in, info, handler)
}

// CrawlerMaster_ServiceDesc is the grpc.ServiceDesc for CrawlerMaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrawlerMaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CrawlerMaster",
	HandlerType: (*CrawlerMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddResource",
			Handler:    _CrawlerMaster_AddResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _CrawlerMaster_DeleteResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crawler.proto",
}
